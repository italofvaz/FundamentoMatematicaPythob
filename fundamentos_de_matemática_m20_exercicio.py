# -*- coding: utf-8 -*-
"""Fundamentos de Matemática - M20 Exercicio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DcR25g3GQVKLWfRz_RX7Qzs39Z4HKALY

---
"""

import os
from getpass import getpass

username = "italofvaz" # insira o seu nome de usuário do git
os.environ["GITHUB_USER"] = username

!git config --global user.name "${GITHUB_USER}"

usermail = getpass()
os.environ["GITHUB_MAIL"] = usermail

!git config --global user.email "${GITHUB_MAIL}"

usertoken = getpass()
os.environ["GITHUB_TOKEN"] = usertoken

!git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/italofvaz/FundamentoMatematicaPythob.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/FundamentoMatematicaPythob/

"""# **Exercícios**

## 1\. Tráfego de São Paulo

Neste exercício, vamos analisar dados de mobilidade urbana da cidade de São Paulo. A base de dados está neste [link](https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/develop/dataset/traffic.csv) e é uma copia do dado original, presente neste [link](https://archive.ics.uci.edu/ml/datasets/Behavior+of+the+urban+traffic+of+the+city+of+Sao+Paulo+in+Brazil). A base de dados contem a quantidade de acidentes ocorridos na cidade entre 14/12/09 e 18/12/09, das 07:00h ás 20:00h, agregados em intervalos de 30 minutos.
"""

!wget -q "https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/develop/dataset/traffic.csv" -O traffic.csv

import pandas as pd

df = pd.read_csv('traffic.csv', sep=';')

df.head(50)

"""- **Exemplo**:

O código abaixo extrai a 13ª linha do arquivo que representa a 14ª meia hora do dia 14/12/09, contadas a partir das 07:00h, ou seja, todos os incidentes ocorridos na cidade no dia em questão entre as 13:30h e 14:00h. Vemos, por exemplo, que dois ônibus e dois caminhões ficaram paradados nas ruas da cidade, atrapalhando o tráfego.
"""

df.iloc[[13]]

"""### **1.1. Nativo**

Neste primeira atividade, você deve ler o código abaixo implementado em Python nativo e responder a seguinte pergunta:

> O que o código abaixo computa?

**Resposta**: o codigo percorre todo o arqeuivo e faz uma soma dos incidentes em um mesmo dia. ao final do codigo ele grava a soma dos incidentes no dicionario incidents_by_day, incrementa o contador dos dias e zera o contador de incidentes. então reinicia o processo para o proximo dia, neste caso o codigo já inicia no dia 14, então as saidas do codigo eh a partir deste dia.
"""

# -- read

data = None

with open(file='traffic.csv', mode='r', encoding='utf8') as fp:

  fp.readline()
  data = fp.read()

# -- analytics

day = 14
incidents = 0
incident_by_day = dict()

for timebox in data.split(sep='\n'):

  timebox_data = timebox.split(sep=';')

  # --
  # -- inicio da computação escalar
  # --

  for incident in timebox_data[1: len(timebox_data)-1]:
    incidents = incidents + int(incident)

  # --
  # -- fim da computação escalar
  # --

  try:

    half_hour = int(timebox_data[0])

    if half_hour == 27:
      incident_by_day[day] = incidents
      day = day + 1
      incidents = 0

  except ValueError:
    continue

# -- results

for day in incident_by_day:

  print(f'{day}: {incident_by_day[day]}')

"""### **1.2. NumPy**

Substitua o trecho do código do algoritmo que utiliza da **computação escalar** por um que utiliza da **computação vetorial**. Use o pacote NumPy.
"""

# -- read
import numpy as np

data = None

with open(file='traffic.csv', mode='r', encoding='utf8') as fp:

  fp.readline()
  data = fp.read()

# -- analytics


day = 14
incidents = 0
incident_by_day = dict()

for timebox in data.split(sep='\n'):

  timebox_data = timebox.split(sep=';')

  # --
  # -- inicio da computação vetorial
  # --

  timebox_np = np.array(timebox_data[1:-1], dtype=int)
  incidents = incidents + np.sum(timebox_np)


  # --
  # -- fim da computação vetorial
  # --

  try:

    half_hour = int(timebox_data[0])

    if half_hour == 27:
      incident_by_day[day] = incidents
      day = day + 1
      incidents = 0

  except ValueError:
    continue

# -- results

for day in incident_by_day:

  print(f'{day}: {incident_by_day[day]}')

"""---"""